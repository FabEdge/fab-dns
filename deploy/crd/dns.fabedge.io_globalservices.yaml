
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.2.5
  creationTimestamp: null
  name: globalservices.dns.fabedge.io
spec:
  additionalPrinterColumns:
  - JSONPath: .spec.type
    description: The type of global service
    name: Type
    type: string
  - JSONPath: .metadata.creationTimestamp
    description: How long a global service is created
    name: Age
    type: date
  group: dns.fabedge.io
  names:
    kind: GlobalService
    listKind: GlobalServiceList
    plural: globalservices
    singular: globalservice
  scope: Namespaced
  subresources: {}
  validation:
    openAPIV3Schema:
      description: GlobalService is used to represent a service which can be accessed
        through multi-clusters A global services' endpoints can be services if its
        type is ClusterIP  or pods if its type is Headless
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
          type: string
        kind:
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          type: string
        metadata:
          type: object
        spec:
          description: GlobalServiceSpec describes global service and the information
            necessary to consume it.
          properties:
            endpoints:
              items:
                description: Endpoint represents a single logical "backend" implementing
                  a service.
                properties:
                  addresses:
                    description: addresses of this endpoint. The contents of this
                      field are interpreted according to the corresponding EndpointSlice
                      addressType field. Consumers must handle different types of
                      addresses in the context of their own capabilities. This must
                      contain at least one address but no more than 100.
                    items:
                      type: string
                    type: array
                    x-kubernetes-list-type: set
                  conditions:
                    description: conditions contains information about the current
                      status of the endpoint.
                    properties:
                      ready:
                        description: ready indicates that this endpoint is prepared
                          to receive traffic, according to whatever system is managing
                          the endpoint. A nil value indicates an unknown state. In
                          most cases consumers should interpret this unknown state
                          as ready. For compatibility reasons, ready should never
                          be "true" for terminating endpoints.
                        type: boolean
                      serving:
                        description: serving is identical to ready except that it
                          is set regardless of the terminating state of endpoints.
                          This condition should be set to true for a ready endpoint
                          that is terminating. If nil, consumers should defer to the
                          ready condition. This field can be enabled with the EndpointSliceTerminatingCondition
                          feature gate.
                        type: boolean
                      terminating:
                        description: terminating indicates that this endpoint is terminating.
                          A nil value indicates an unknown state. Consumers should
                          interpret this unknown state to mean that the endpoint is
                          not terminating. This field can be enabled with the EndpointSliceTerminatingCondition
                          feature gate.
                        type: boolean
                    type: object
                  hostname:
                    description: hostname of this endpoint. This field may be used
                      by consumers of endpoints to distinguish endpoints from each
                      other (e.g. in DNS names). Multiple endpoints which use the
                      same hostname should be considered fungible (e.g. multiple A
                      values in DNS). Must be lowercase and pass DNS Label (RFC 1123)
                      validation.
                    type: string
                  nodeName:
                    description: nodeName represents the name of the Node hosting
                      this endpoint. This can be used to determine endpoints local
                      to a Node. This field can be enabled with the EndpointSliceNodeName
                      feature gate.
                    type: string
                  targetRef:
                    description: targetRef is a reference to a Kubernetes object that
                      represents this endpoint.
                    properties:
                      apiVersion:
                        description: API version of the referent.
                        type: string
                      fieldPath:
                        description: 'If referring to a piece of an object instead
                          of an entire object, this string should contain a valid
                          JSON/Go field access statement, such as desiredState.manifest.containers[2].
                          For example, if the object reference is to a container within
                          a pod, this would take on a value like: "spec.containers{name}"
                          (where "name" refers to the name of the container that triggered
                          the event) or if no container name is specified "spec.containers[2]"
                          (container with index 2 in this pod). This syntax is chosen
                          only to have some well-defined way of referencing a part
                          of an object. TODO: this design is not final and this field
                          is subject to change in the future.'
                        type: string
                      kind:
                        description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                        type: string
                      name:
                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                        type: string
                      namespace:
                        description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                        type: string
                      resourceVersion:
                        description: 'Specific resourceVersion to which this reference
                          is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                        type: string
                      uid:
                        description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                        type: string
                    type: object
                  topology:
                    additionalProperties:
                      type: string
                    description: 'topology contains arbitrary topology information
                      associated with the endpoint. These key/value pairs must conform
                      with the label format. https://kubernetes.io/docs/concepts/overview/working-with-objects/labels
                      Topology may include a maximum of 16 key/value pairs. This includes,
                      but is not limited to the following well known keys: * kubernetes.io/hostname:
                      the value indicates the hostname of the node   where the endpoint
                      is located. This should match the corresponding   node label.
                      * topology.kubernetes.io/zone: the value indicates the zone
                      where the   endpoint is located. This should match the corresponding
                      node label. * topology.kubernetes.io/region: the value indicates
                      the region where the   endpoint is located. This should match
                      the corresponding node label. This field is deprecated and will
                      be removed in future api versions.'
                    type: object
                required:
                - addresses
                type: object
              type: array
            ports:
              items:
                description: ServicePort represents the port on which the service
                  is exposed
                properties:
                  appProtocol:
                    description: The application protocol for this port. This field
                      follows standard Kubernetes label syntax. Un-prefixed names
                      are reserved for IANA standard service names (as per RFC-6335
                      and http://www.iana.org/assignments/service-names). Non-standard
                      protocols should use prefixed names such as mycompany.com/my-custom-protocol.
                      Field can be enabled with ServiceAppProtocol feature gate.
                    type: string
                  name:
                    description: The name of this port within the service. This must
                      be a DNS_LABEL. All ports within a ServiceSpec must have unique
                      names. When considering the endpoints for a Service, this must
                      match the 'name' field in the EndpointPort. Optional if only
                      one ServicePort is defined on this service.
                    type: string
                  port:
                    description: The port that will be exposed by this service.
                    format: int32
                    type: integer
                  protocol:
                    description: The IP protocol for this port. Supports "TCP", "UDP",
                      and "SCTP". Default is TCP.
                    type: string
                type: object
              type: array
            type:
              description: Type represents the type of services which are the backends
                of a global service Must be ClusterIP or Headless
              enum:
              - ClusterIP
              - Headless
              type: string
          type: object
      type: object
  version: v1alpha1
  versions:
  - name: v1alpha1
    served: true
    storage: true
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
